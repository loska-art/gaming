#lang racket

(require 2htdp/universe)
(require 2htdp/image)
(require test-engine/racket-tests)

;; developing main functions for memory game.

(define size 10)
(define pic1 (circle size "solid" "red"))
(define pic2 (circle size "solid" "blue"))
(define pic3 (circle size "solid" "green"))
(define pic4 (circle size "solid" "yellow"))
(define pic5 (circle size "solid" "black"))
(define pic6 (circle size "solid" "grey"))

;; task: given pictures, sets a double list of them in random order.
(define lop-ex (list pic1 pic2 pic3 pic4 pic5 pic6))


;; generate-memory-pics/list :: [List-of Pictures] -> [List-of Pictures]
;; given lop, returns a list of same pics but two of each, in randomly chosen order.
(define (generate-memory-pics/list lop)
  (local (; double initial list:
          (define double/list (append lop lop))
          ; accumulator based helper f:
          (define (generate* pics acc)
              (cond
                [(null? pics) acc]
                [else
                 (let ([chosen-item (random-item pics)])
                   (generate*
                    (remove chosen-item pics)
                    (cons chosen-item acc)))])))
    (generate* double/list '())))


;; -----------------------------------------------------
;; -------------------- helpers: -----------------------

;; random-item :: [List-of X] -> X
;; given l, returns randomly chosen item.
(define (random-item l)
  (let ([x (random (length l))])
    (list-ref l x)))


;; my/andmap :: Procedure[X -> Boolean] [List-of X] -> Boolean
;; returns true if all items return #t for given procedure, else #false.
(check-expect (my/andmap odd? '(1 3 5 7)) #t)
(check-expect (my/andmap odd? '(1 3 6 7)) #f)
(check-expect (my/andmap (lambda (val) (equal? val "a")) '("a" "b" "a" "a")) #f)

(define (my/andmap test l)
  (cond
    [(null? l) #t]
    [(test (car l))
     (my/andmap test (cdr l))]
    [else #f]))

;; is-member? :: X [List-of X] -> Boolean
;; returns true if given item is included in l.
(define (is-member? item l)
  (cond
    [(null? l) #f]
    [(equal? (car l) item) #t]
    [else
     (is-member? item (cdr l))]))

;; is-set? :: List-of Any -> Boolean
;; returns true if given l is a set.
(check-expect (is-set? '(1 2 3 4 5 1)) #f)
(check-expect (is-set? '(1 2 3 4 5 6)) #t)
(check-expect (is-set? '("a" "A" "b" "B" pic1)) #t)

(define (is-set? l)
  (cond
    [(empty? l) #t]
    [(empty? (cdr l)) #t]
    [(member (car l) (cdr l)) #f]
    [else
     (is-set? (cdr l))]))

(test)

(define memory-pics (generate-memory-pics/list lop-ex))
;; -------------------------------------------------------

(define (place-on-scene lop scene)
  (local (; aux ratios:
          (define max-cols 4)
          (define max-rows 3)
          (define width-gap (round (/ (image-width scene) (add1 max-cols))))
          (define height-gap (round (/ (image-height scene) (add1 max-rows))))
          ; acc-based helper f:
          (define (render l col row w h bkg)
            (cond
              [(null? l) bkg]
              [(= col max-cols)
               (render (cdr l) 1 (add1 row) width-gap (+ h height-gap)
                       (place-image (car l) w h bkg))]
              [else
               (render (cdr l) (add1 col) row (+ w width-gap) h
                       (place-image (car l) w h bkg))])))
    (render lop 1 1 width-gap height-gap scene)))


(place-on-scene memory-pics (empty-scene 200 200))


